'use client';

import React from 'react';
import { motion } from 'framer-motion';
import { Event, Creator } from '@/lib/types';

interface AutoGeneratedBannerProps {
  data: Event | Creator;
  type: 'event' | 'creator';
  style?: 'minimal' | 'vibrant' | 'professional' | 'creative';
  size?: 'small' | 'medium' | 'large';
}

export const AutoGeneratedBanner: React.FC<AutoGeneratedBannerProps> = ({
  data,
  type,
  style = 'vibrant',
  size = 'medium'
}) => {
  // サイズ設定
  const sizes = {
    small: 'h-32',
    medium: 'h-48',
    large: 'h-64'
  };

  // スタイル別の設定
  const styles = {
    minimal: {
      background: 'bg-gradient-to-r from-gray-50 to-gray-100',
      text: 'text-gray-800',
      accent: 'text-gray-600'
    },
    vibrant: {
      background: 'bg-gradient-to-r from-purple-500 via-pink-500 to-red-500',
      text: 'text-white',
      accent: 'text-white/80'
    },
    professional: {
      background: 'bg-gradient-to-r from-blue-600 to-blue-800',
      text: 'text-white',
      accent: 'text-blue-100'
    },
    creative: {
      background: 'bg-gradient-to-r from-green-400 via-blue-500 to-purple-600',
      text: 'text-white',
      accent: 'text-white/90'
    }
  };

  const currentStyle = styles[style];

  // 自動タイトル生成
  const generateTitle = () => {
    if (type === 'event') {
      const event = data as Event;
      return event.title;
    } else {
      const creator = data as Creator;
      return `${creator.name} - ${creator.profession}`;
    }
  };

  // 自動サブタイトル生成
  const generateSubtitle = () => {
    if (type === 'event') {
      const event = data as Event;
      return event.subtitle || `${event.date} at ${event.venue}`;
    } else {
      const creator = data as Creator;
      return creator.bio.slice(0, 100) + '...';
    }
  };

  // 自動アイコン生成
  const generateIcon = () => {
    if (type === 'event') {
      return (
        <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
        </svg>
      );
    } else {
      return (
        <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
        </svg>
      );
    }
  };

  // 装飾パターン生成
  const generatePattern = () => {
    const patterns = [
      'circles',
      'dots',
      'lines',
      'waves'
    ];
    const pattern = patterns[Math.floor(Math.random() * patterns.length)];
    
    switch (pattern) {
      case 'circles':
        return (
          <div className="absolute inset-0 opacity-10">
            {[...Array(12)].map((_, i) => (
              <div
                key={i}
                className="absolute w-32 h-32 rounded-full border-2 border-white"
                style={{
                  top: `${Math.random() * 100}%`,
                  left: `${Math.random() * 100}%`,
                  transform: 'translate(-50%, -50%)'
                }}
              />
            ))}
          </div>
        );
      case 'dots':
        return (
          <div className="absolute inset-0 opacity-20 bg-[url('data:image/svg+xml,%3Csvg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="%23ffffff" fill-opacity="0.4"%3E%3Ccircle cx="3" cy="3" r="1"/%3E%3C/g%3E%3C/svg%3E')]" />
        );
      case 'lines':
        return (
          <div className="absolute inset-0 opacity-10">
            {[...Array(8)].map((_, i) => (
              <div
                key={i}
                className="absolute w-px h-full bg-white"
                style={{ left: `${(i + 1) * 12.5}%` }}
              />
            ))}
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
      className={`relative ${sizes[size]} ${currentStyle.background} rounded-lg overflow-hidden shadow-lg`}
    >
      {/* 背景パターン */}
      {generatePattern()}

      {/* グラデーションオーバーレイ */}
      <div className="absolute inset-0 bg-gradient-to-r from-black/20 to-transparent" />

      {/* コンテンツ */}
      <div className="relative h-full flex items-center p-6">
        <div className="flex items-center space-x-4">
          {/* アイコン */}
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ delay: 0.3, duration: 0.5 }}
            className={`p-3 bg-white/20 backdrop-blur-sm rounded-lg ${currentStyle.text}`}
          >
            {generateIcon()}
          </motion.div>

          {/* テキスト */}
          <div className="flex-1">
            <motion.h3
              initial={{ x: -20, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              transition={{ delay: 0.4, duration: 0.5 }}
              className={`text-lg font-bold ${currentStyle.text} mb-1`}
            >
              {generateTitle()}
            </motion.h3>
            <motion.p
              initial={{ x: -20, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              transition={{ delay: 0.5, duration: 0.5 }}
              className={`text-sm ${currentStyle.accent}`}
            >
              {generateSubtitle()}
            </motion.p>
          </div>

          {/* アクションボタン */}
          <motion.button
            initial={{ x: 20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.6, duration: 0.5 }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="px-4 py-2 bg-white/20 backdrop-blur-sm rounded-lg text-white font-medium hover:bg-white/30 transition-colors duration-200"
          >
            詳細
          </motion.button>
        </div>
      </div>
    </motion.div>
  );
};